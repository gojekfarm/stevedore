// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/github.com/micro/go-micro/config/reader/reader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reader "github.com/micro/go-micro/config/reader"
	source "github.com/micro/go-micro/config/source"
	reflect "reflect"
	time "time"
)

// MockReader is a mock of Reader interface
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Merge mocks base method
func (m *MockReader) Merge(arg0 ...*source.ChangeSet) (*source.ChangeSet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Merge", varargs...)
	ret0, _ := ret[0].(*source.ChangeSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Merge indicates an expected call of Merge
func (mr *MockReaderMockRecorder) Merge(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockReader)(nil).Merge), arg0...)
}

// Values mocks base method
func (m *MockReader) Values(arg0 *source.ChangeSet) (reader.Values, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values", arg0)
	ret0, _ := ret[0].(reader.Values)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Values indicates an expected call of Values
func (mr *MockReaderMockRecorder) Values(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockReader)(nil).Values), arg0)
}

// String mocks base method
func (m *MockReader) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockReaderMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockReader)(nil).String))
}

// MockValues is a mock of Values interface
type MockValues struct {
	ctrl     *gomock.Controller
	recorder *MockValuesMockRecorder
}

// MockValuesMockRecorder is the mock recorder for MockValues
type MockValuesMockRecorder struct {
	mock *MockValues
}

// NewMockValues creates a new mock instance
func NewMockValues(ctrl *gomock.Controller) *MockValues {
	mock := &MockValues{ctrl: ctrl}
	mock.recorder = &MockValuesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValues) EXPECT() *MockValuesMockRecorder {
	return m.recorder
}

// Bytes mocks base method
func (m *MockValues) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockValuesMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockValues)(nil).Bytes))
}

// Get mocks base method
func (m *MockValues) Get(path ...string) reader.Value {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range path {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(reader.Value)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockValuesMockRecorder) Get(path ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockValues)(nil).Get), path...)
}

// Map mocks base method
func (m *MockValues) Map() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockValuesMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockValues)(nil).Map))
}

// Scan mocks base method
func (m *MockValues) Scan(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockValuesMockRecorder) Scan(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockValues)(nil).Scan), v)
}

// MockValue is a mock of Value interface
type MockValue struct {
	ctrl     *gomock.Controller
	recorder *MockValueMockRecorder
}

// MockValueMockRecorder is the mock recorder for MockValue
type MockValueMockRecorder struct {
	mock *MockValue
}

// NewMockValue creates a new mock instance
func NewMockValue(ctrl *gomock.Controller) *MockValue {
	mock := &MockValue{ctrl: ctrl}
	mock.recorder = &MockValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValue) EXPECT() *MockValueMockRecorder {
	return m.recorder
}

// Bool mocks base method
func (m *MockValue) Bool(def bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bool", def)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Bool indicates an expected call of Bool
func (mr *MockValueMockRecorder) Bool(def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bool", reflect.TypeOf((*MockValue)(nil).Bool), def)
}

// Int mocks base method
func (m *MockValue) Int(def int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int", def)
	ret0, _ := ret[0].(int)
	return ret0
}

// Int indicates an expected call of Int
func (mr *MockValueMockRecorder) Int(def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockValue)(nil).Int), def)
}

// String mocks base method
func (m *MockValue) String(def string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", def)
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockValueMockRecorder) String(def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockValue)(nil).String), def)
}

// Float64 mocks base method
func (m *MockValue) Float64(def float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float64", def)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Float64 indicates an expected call of Float64
func (mr *MockValueMockRecorder) Float64(def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float64", reflect.TypeOf((*MockValue)(nil).Float64), def)
}

// Duration mocks base method
func (m *MockValue) Duration(def time.Duration) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duration", def)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Duration indicates an expected call of Duration
func (mr *MockValueMockRecorder) Duration(def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duration", reflect.TypeOf((*MockValue)(nil).Duration), def)
}

// StringSlice mocks base method
func (m *MockValue) StringSlice(def []string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringSlice", def)
	ret0, _ := ret[0].([]string)
	return ret0
}

// StringSlice indicates an expected call of StringSlice
func (mr *MockValueMockRecorder) StringSlice(def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringSlice", reflect.TypeOf((*MockValue)(nil).StringSlice), def)
}

// StringMap mocks base method
func (m *MockValue) StringMap(def map[string]string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringMap", def)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// StringMap indicates an expected call of StringMap
func (mr *MockValueMockRecorder) StringMap(def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringMap", reflect.TypeOf((*MockValue)(nil).StringMap), def)
}

// Scan mocks base method
func (m *MockValue) Scan(val interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockValueMockRecorder) Scan(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockValue)(nil).Scan), val)
}

// Bytes mocks base method
func (m *MockValue) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockValueMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockValue)(nil).Bytes))
}
