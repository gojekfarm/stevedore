// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/stevedore/chart_builder.go

// Package chartMocks is a generated GoMock package.
package chartMocks

import (
	context "context"
	stevedore "github.com/gojek/stevedore/pkg/stevedore"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChartBuilder is a mock of ChartBuilder interface
type MockChartBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockChartBuilderMockRecorder
}

// MockChartBuilderMockRecorder is the mock recorder for MockChartBuilder
type MockChartBuilderMockRecorder struct {
	mock *MockChartBuilder
}

// NewMockChartBuilder creates a new mock instance
func NewMockChartBuilder(ctrl *gomock.Controller) *MockChartBuilder {
	mock := &MockChartBuilder{ctrl: ctrl}
	mock.recorder = &MockChartBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChartBuilder) EXPECT() *MockChartBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockChartBuilder) Build(ctx context.Context, chartName, version, appVersion string, dependencies stevedore.Dependencies) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", ctx, chartName, version, appVersion, dependencies)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build
func (mr *MockChartBuilderMockRecorder) Build(ctx, chartName, version, appVersion, dependencies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockChartBuilder)(nil).Build), ctx, chartName, version, appVersion, dependencies)
}
